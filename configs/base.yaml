# This includes every setting that can be overriden.
# These are generally NOT the default value
window:                                 # Window showing the simulation
  width: 1000                           # Window Width
  height: 1000                          # Window Height
  subtitle: Base                        # Window title will be "Arcade Explorer {subtitle}"
drawing:                                # Rules for what is drawn and how
  scale: 0.256                          # Bot size = scale * size pixels
  size: 128
  draw_trajectory: false                # If the bot has a future path then draw it as blue lines
  draw_sensors: false                   # Draw the range finder rays as red dotted lines
  draw_comms: false                     # Show blue rings around the bot when it is communicating on an update, size = range (unless unlimited, then they are small around the bot)
camera:                                 # Camera motion parameters
  viewport_margin: 400                  # Proximity of the followed bot to the screen edge to trigger camera panning.
  speed: 0.2                            # Valid values are 0 < speed <= 1. 1 means the camera instantly pans to the desired location.
  focus_timer: 100                      # The camera jumps from bot to bot while the simulation runs. This is the number of simulation steps between hops.
simulation:                             # All things that affect the output images
  output_dir: "output/results"          # Folder to store output files
  log_file: explorer.log                # Log file name but command line argument overrides this
  split_out_bot_logs: true              # Send robot logs to the simulation log file or a file just for that bot instance
  save_video: true                      # Save a video of the simulation
  sim_steps: 200                        # Number of simulation steps before the simulation ends and results saved out as images
  use_async: true                       # Run bots and their sensors asynchronously
  async_physics: true                   # Run the physics engines asynchronously (changes bot-bot collision behavior and may make the performance non-repeatable)
  map_generator:                        # Randomly generated map parameters
    grid_width: 30                      # Map is a grid of walls and open space
    grid_height: 30
    grid_seed: 12345                    # Default is None so the simulation is different every time. Set this to get the same behavior each time.
    # base: True                          # This is the default choice of map generator
    cellular:                           # Cellular automata based map generation parameters
      start_alive_chance: 0.5           # Each cell's chance to start as a wall
      death_limit: 5                    # Each cell's limit to its "deaths" (wall -> open transition)
      birth_limit: 5                    # Each cell's limit to its "births" (open -> wall transition)
      steps: 5                          # Steps in the cellular automata simulation
    # manual:                             # All items in points are obstructions
    #   points:                           # A list of obstruction locations
    #   - 'x': 0
    #     'y': 0
    # image:                              # Generate a map from an image file
    #   image_file: None                  # The filename for the image. This cannot be None!
    #   open_cell_color: custom           # The pixel color of open cells. Default white but could be a positional sample px_bl, px_br, px_tl, px_tr, px_center, an HTML color name, or custom
    #   custom_color:                     # If open_cell_color is custom then this is the color. Each channel is in the range 0 to 255
    #     r: 0
    #     g: 0
    #     b: 255
    #   scale: 1                          # Scale of the map pixels vs the scale of the image pixels. E.g. at scale 2, a 256x256 image generates a 512x512 map
    #   ratio: 0                          # Percent of pixels that aren't the open_cell color to identify an obstruction
    #   draw_style: obstructions          # Display the image, obstructions, or overlay of obstructions on the image
  robots:                               # Parameters that control all robots
    - bot_count: 1                      # Number of bots of this type to simulate
      type: random                      # Select which robot class to use
      map_resolution: high              # Map generated by sensors resolution. low/parity/high resolution = 1:4 / 1:1 / 4:1 sensor map cells to simulation map cells
      sensor:                           # Laser range finder settings
        count: 4                        # Number of sensors placed radially evenly around bot. E.g. 4 = [0,90,180,270] degrees positions. Sensors are in fixed position independent of bot motion.
        beam_grid_scale: 2              # Width of the range finder beam. Usually 1 grid width
        range_grid_scale: 10            # Maximum distance from the bot where the laser will "reflect."" (No dead zone near bot.)
      comms:                            # Simulated wireless communication
        wireless_range_grid_scale: 10   # Number of grid cells away that the signal can be sent or a signal can be received from
        update_period: 1                # How often updates are transmitted. 1 = every simulation step
      name_generator:                   # One word from each list is randomly selected to make a robot name. E.g. from below a possible result is: Green Wolf Claw
        - - Red
          - Green
          - Blue
        - - Wolf
          - Dragon
        - - Fang
          - Claw